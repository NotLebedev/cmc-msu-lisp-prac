#lang racket/base

(require "../../lib/vec-tree.rkt" "code.rkt" rackunit)

(check-equal? (task-4 #() 0) #t)
(check-equal? (task-4 #(1 #() #()) 1) #t)
(check-equal? (task-4 #() 1) #f)

; Tests
(define tests (list
               ; r
               ; / \
               ; n n
               ; / \ | \
               ; n n n n
               ; | \ | \
               ; n n n n
               ; \
               ; n
               (task-4 #(1 #(1 #(1 #() #()) #(1 #() #(1 #() #()))) #(1 #(1 #() #(1 #() #())) #(1 #(1 #() #()) #(1 #() #(1 #() #()))))) 5)
               ; r
               ; / \
               ; n n
               ; / \ | \
               ; n n n n
               ; | \ | \
               ; n n n n
               ; \
               ; n
               (task-4 #(1 #(1 #(1 #() #()) #(1 #() #(1 #() #()))) #(1 #(1 #() #(1 #() #())) #(1 #(1 #() #()) #(1 #() #(1 #() #()))))) 4)
               ; r
               ; / \
               ; n n
               ; / \ | \
               ; n n n n
               ; \ | \
               ; n n n
               ; \
               ; n
               (task-4 #(1 #(1 #(1 #() #()) #(1 #() #())) #(1 #(1 #() #(1 #() #())) #(1 #(1 #() #()) #(1 #() #(1 #() #()))))) 5)
               ; r
               ; / \
               ; n n
               ; \ | \
               ; n n n
               ; |
               ; n
               (task-4 #(1 #(1 #() #(1 #() #())) #(1 #(1 #() #()) #(1 #() #(1 #() #())))) 4)
               ; r
               ; / \
               ; n n
               ; \ | \
               ; n n n
               ; | |
               ; n n
               (task-4 #(1 #(1 #() #(1 #() #())) #(1 #(1 #() #(1 #() #())) #(1 #() #(1 #() #())))) 4)
               ; r
               ; / \
               ; n n
               ; \
               ; n
               (task-4 #(1 #(1 #() #()) #(1 #() #(1 #() #()))) 3)
               ; r
               ; \
               ; n
               (task-4 #(1 #() #(1 #() #())) 2)
               ; r
               ; /
               ; n
               (task-4 #(1 #(1 #() #()) #()) 2)
               ; r
               ; / \
               ; n n
               (task-4 #(1 #(1 #() #()) #(1 #() #())) 2)

               (task-4 #() 0)
               (task-4 #(1 #() #()) 1)
               (task-4 #() 1)

               ; r
               ; / \
               ; n n
               ; |
               ; n
               (task-4 #(1 #(1 #(1 #() #()) #()) #(1 #() #())) 2)

               ; Full tree
               (task-4 #(1 #(1 #(1 #(1 #() #()) #(1 #() #())) #(1 #(1 #() #()) #(1 #() #())))
                           #(1 #(1 #(1 #() #()) #(1 #() #())) #(1 #(1 #() #()) #(1 #() #())))) 4)))

(define answers '(#t #f #f #t #f #t #t #f #f #t #t #f #f #f))

(for-each
 (lambda (x y i)
   (if (equal? x y)
       #t
       (printf "====\ntest: ~a;\nGiven answer: ~a\nCorrect: ~a" i x y)
       )
   )
 tests
 answers
 (build-list (length tests) values)
 )